[%
var script:Script = Script.allInstances().get(0);
%]#!/bin/bash
# Proyecto Gesco
# Descripcion: [%=script.descripcion%]

#
# Preparación de Espacio de Trabajo
#
cd ~/
mkdir temporal
cd temporal
yum -y install curl


#
# Repositorios
#
[%=generarRepos(script.repositorios)%]



#
# Aplicaciones
#
yum list
yum groupinstall 'Development Tools'
[%=generarApps(script.aplicaciones)%]


#
#Configuración e instalación de Mono
#

cd /opt
wget -t 0 -c http://ftp.ruby-lang.org/pub/ruby/ruby-1.9.3-p547.tar.gz
tar -xzvf ruby-1.9.3-p547.tar.gz
cd ruby-1.9.3-p547/
./configure
make
sudo make install
ruby -v

gem install rails --version 3.2.8 #Descripcion: Framework para aplicaciones web en Ruby. Ruby on Rails. Version: 3.2.8. Arquitectura: x64
gem install bundler #Descripcion: Gestor de dependencia en Ruby on Rails. Arquitectura: x64

cd ~/
mkdir cms
cd cms
wget -t 0 -c http://157.253.238.183/temp/cms.sql
chmod 777 cms.sql
mysql -u root -p < cms.sql
wget -t 0 -c http://157.253.238.183/temp/mono.tar.gz
chmod 777 mono.tar.gz
tar -xzvf mono.tar.gz
chmod 777 -R mono
bundle install

cd ~/
rm -rf temporal

echo "=================================="
echo "Proceso de instalación ha finalizado"
echo "=================================="
echo "Por favor, ingrese a directorio 'cms', luego a la carpeta 'mono' y finalmente a la carpeta 'config'"
echo "Y en modifique el archivo 'database.yml' en los apartados 'password' con la contraseña de su "
echo "gestor base de datos MySQL. Ejemplo: 'password: 12345678'."
echo "=================================="
echo "Finalmente regrese a la carpeta mono, y ejecute el comando 'rails server'"
echo "Espere un momento mientras carga, y finalmente desde un explorador de internet"
echo "Ingrese a la direccion: 'localhost:3000'"
echo "El usuario por defecto es: admin@david.com"
echo "Y la contraseña es: 12345678"
echo "====== Gracias por usar Gesco ======"

[%
// ===== Operaciones =====
operation generarRepos(repositorios:Set): String{

	var lineas:String;	
	for(repo in repositorios){
		if(repo.gestor <> "ppa" and not repo.gestor.contains("apt")){
			switch(repo.gestor){
				case "rpm-import" : lineas = lineas + 'rpm --import '+repo.aplicacion;
				case "rpm-import-install" : lineas = lineas + 'rpm -ivh '+repo.aplicacion;
				case "rpm-k" : lineas = lineas + 'rpm -K '+repo.aplicacion;
				case "rpm-i" : lineas = lineas + 'rpm -i '+repo.aplicacion;
				case "wget" : lineas = lineas + 'wget -t 0 -c '+repo.aplicacion;
				case "curl" : lineas = lineas + 'curl -sL '+repo.aplicacion + '| bash -';
				default : lineas = lineas + '# add-apt-repository -y '+repo.aplicacion; 
			}
			lineas = lineas +" #"+repo.descripcion;
			lineas = lineas + "\n";
		}
	}	
	return lineas;
}

operation generarApps(apps:Set): String{

	var lineas:String;	
	for(app in apps){
		if(app.aplicacion <> "build-essential" and app.aplicacion <> "gpac" and not app.aplicacion.contains("sqlite") and app.aplicacion <> "python-software-properties" and app.aplicacion <> "libmysqlclient-dev"){
			switch(app.aplicacion){
				case "openjdk7" : lineas = lineas +  'yum -y install java-1.7.0-openjdk';
				case "tomcat7" : lineas = lineas + 'cd ~/temporal && mv apache-tomcat-7.0.57.tar.gz tomcat7.tar.gz && mv tomcat7.tar.gz /opt/ && cd /opt && tar -xzvf tomcat7.tar.gz && echo "#!/bin/bash" > /etc/profile.d/tomcat.sh && echo "CATALINA_HOME=/opt/tomcat7" > /etc/profile.d/tomcat.sh && echo "PATH=$CATALINA_HOME/bin:$PATH" > /etc/profile.d/tomcat.sh && echo "export PATH CATALINA_HOME" > /etc/profile.d/tomcat.sh && echo "export CLASSPATH=." > /etc/profile.d/tomcat.sh && chmod +x /etc/profile/tomcat.sh && chmod +x $CATALINA_HOME/bin/startup.sh &&  chmod +x $CATALINA_HOME/bin/shutdown.sh && chmod +x $CATALINA_HOME/bin/catalina.sn';
				case "libyaml-dev" : lineas  = lineas + "cd ~/temporal && mv yaml-0.1.4.tar.gz libyaml.tar.gz && mv libyaml.tar.gz /opt/ && cd /opt && tar -xzvf libyaml.tar.gz && cd libyaml && ./configure --prefix=/usr/local &&  make && make install";
				case "lamp-server^" : lineas = lineas + "yum -y install httpd && yum -y install mysql-server && yum -y install php php-mysql && yum -y install gcc php-devel php-pear";
				case "rabbitmq-server" : lineas = lineas +  'chmod 777 -R rabbitmq-server-3.4.1-1.noarch.rp'+"\n"+'rpm -Uvh rabbitmq-server-3.4.1-1.noarch.rpm';
				case "libimage-exiftool-perl" : lineas = lineas + "yum -y install perl-Image-ExifTool";
				case "zlib1g-dev" : lineas = lineas + "yum -y install zlib-devel";
				case "libssl-dev" : lineas = lineas + "yum -y install openssl-devel";
				case "libreadline-dev" : lineas = lineas + "yum -y install readline-devel";
				case "libxml2-dev" : lineas = lineas + "yum -y install libxml2";
				case "libxslt1-dev" : lineas = lineas + "yum -y install libxslt";
				default : lineas = lineas + 'yum -y install '+app.aplicacion;
			}
		}
		else{
			if(app.aplicacion.contains("sqlite") and not lineas.contains("sqlite-devel")){
				lineas = lineas + 'yum -y install sqlite-devel';
			}	
		}	
		lineas = lineas +" #"+app.descripcion;
		lineas = lineas + "\n";
	}	
	return lineas;
}

%]